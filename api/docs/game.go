// It's autogenerated file. Do not modify it.
// Generated by https://github.com/sergei-svistunov/gostatic2lib

package docs

import (
	"net/http"
	"strings"
)

type HTTPHandler struct {
	files map[string]File
}

type File struct {
	ContentType string
	ETag        string
	Data        []byte
}

func NewHTTPHandler() *HTTPHandler {
	return &HTTPHandler{
		files: map[string]File{
			"/game.md": {
				ContentType: `text/markdown; charset=utf-8`,
				ETag:        "75c5fd19aa83d596",
				Data: []byte{31, 139, 8, 0, 0, 0, 0, 0, 2, 255, 172, 86, 219, 110, 219, 70, 16, 125, 223, 175, 56, 144, 145, 86, 84, 28, 210, 164, 124, 71, 90, 32, 77, 229, 196, 72, 130, 182, 106, 155,
					180, 48, 130, 104, 69, 142, 204, 85, 73, 174, 180, 187, 180, 164, 4, 1, 138, 2, 13, 250, 218, 194, 232, 75, 31, 250, 212, 127, 232, 247,
					248, 11, 250, 9, 197, 146, 186, 155, 182, 210, 34, 134, 4, 99, 135, 51, 231, 204, 156, 29, 113, 102, 107, 11, 223, 196, 4, 149, 39, 164,
					25, 251, 94, 230, 136, 249, 5, 129, 35, 229, 175, 9, 35, 97, 98, 4, 136, 148, 204, 72, 111, 67, 102, 4, 217, 131, 137, 41, 133, 208,
					152, 200, 92, 105, 151, 217, 248, 210, 3, 218, 112, 101, 32, 50, 235, 50, 61, 12, 164, 200, 204, 54, 122, 82, 129, 198, 60, 29, 36, 132,
					55, 254, 182, 255, 22, 245, 127, 254, 252, 227, 111, 167, 12, 31, 137, 44, 35, 101, 49, 57, 6, 9, 159, 144, 194, 40, 150, 72, 136, 71,
					26, 177, 208, 94, 76, 170, 228, 64, 79, 40, 109, 96, 100, 65, 113, 46, 121, 178, 134, 29, 4, 83, 240, 191, 126, 118, 92, 198, 58, 157,
					14, 67, 16, 92, 189, 251, 21, 87, 191, 255, 242, 65, 62, 12, 129, 127, 117, 249, 211, 20, 15, 246, 111, 246, 127, 233, 48, 247, 221, 89, 242, 157, 99, 96, 229, 116, 205, 140, 85, 62, 255, 104, 133, 111, 137, 117, 97, 88, 101, 245, 15, 23, 17, 235, 220, 43, 231, 106, 85, 22,
					56, 7, 183, 49, 47, 202, 158, 251, 239, 175, 243, 222, 72, 131, 155, 101, 96, 240, 247, 54, 87, 188, 194, 187, 187, 170, 242, 70, 165, 171,
					171, 109, 174, 161, 96, 33, 238, 218, 113, 17, 19, 84, 221, 111, 197, 25, 21, 223, 18, 161, 186, 155, 42, 162, 150, 234, 221, 217, 164, 115,
					37, 247, 90, 189, 168, 234, 171, 149, 122, 215, 117, 198, 225, 123, 232, 124, 171, 12, 12, 56, 216, 164, 242, 122, 34, 12, 216, 191, 89, 229,
					255, 80, 239, 94, 5, 243, 45, 93, 133, 221, 77, 191, 162, 205, 15, 230, 88, 205, 107, 90, 95, 187, 103, 172, 87, 29, 92, 87, 27, 155,
					181, 94, 196, 207, 58, 203, 190, 106, 111, 232, 103, 0, 246, 93, 89, 250, 223, 208, 85, 255, 247, 61, 9, 92, 93, 94, 94, 93, 254, 248,
					97, 62, 239, 126, 99, 69, 186, 59, 126, 208, 220, 221, 219, 63, 56, 60, 114, 93, 183, 120, 193, 179, 173, 45, 60, 150, 35, 59, 21, 202,
					161, 195, 113, 206, 83, 98, 204, 119, 241, 144, 39, 73, 49, 43, 82, 50, 177, 140, 208, 104, 156, 245, 165, 200, 94, 214, 183, 188, 246, 151, 15, 239, 4, 59, 165, 93, 123, 214, 250, 234, 194, 119, 26, 13, 151, 5, 149, 113, 35, 46, 204, 43, 147, 171, 138, 224, 249, 163, 18, 193,
					102, 162, 40, 36, 113, 65, 5, 70, 152, 43, 69, 153, 41, 178, 178, 41, 26, 114, 89, 115, 137, 131, 135, 70, 200, 108, 70, 85, 159, 204,
					198, 240, 30, 52, 133, 50, 139, 180, 227, 178, 93, 23, 143, 100, 89, 34, 13, 16, 184, 140, 157, 72, 133, 84, 42, 130, 200, 122, 82, 165,
					188, 192, 208, 52, 75, 89, 35, 34, 29, 42, 49, 40, 236, 93, 74, 228, 200, 93, 150, 106, 192, 149, 166, 114, 206, 247, 148, 76, 209, 249,
					162, 240, 212, 29, 86, 204, 228, 226, 65, 49, 145, 187, 92, 211, 254, 46, 40, 11, 101, 68, 17, 186, 19, 67, 26, 92, 41, 62, 153, 141,
					250, 158, 160, 36, 66, 71, 150, 0, 174, 13, 117, 71, 60, 73, 116, 103, 101, 58, 31, 23, 243, 184, 175, 101, 198, 222, 48, 160, 54, 245,
					175, 29, 227, 77, 113, 181, 53, 27, 56, 63, 1, 181, 2, 163, 118, 140, 154, 231, 121, 222, 233, 232, 233, 201, 176, 169, 158, 15, 253, 126,
					123, 232, 123, 61, 49, 238, 127, 117, 247, 72, 125, 39, 124, 213, 202, 125, 117, 244, 192, 87, 39, 7, 190, 23, 201, 113, 255, 36, 247, 212, 115, 49, 86, 223, 14, 125, 213, 28, 250, 170, 53, 60, 186, 136, 158, 140, 251, 159, 13, 155, 158, 247, 100, 220, 111, 239, 31, 93, 60, 63,
					109, 139, 150, 197, 173, 21, 108, 111, 153, 253, 190, 45, 251, 169, 197, 195, 24, 141, 70, 87, 152, 70, 99, 86, 99, 89, 112, 68, 61, 97,
					55, 29, 209, 3, 71, 72, 73, 130, 152, 91, 141, 108, 166, 144, 10, 145, 36, 157, 125, 108, 92, 124, 77, 118, 61, 153, 239, 37, 133, 252,
					219, 136, 75, 233, 195, 152, 194, 31, 202, 206, 160, 36, 41, 101, 57, 151, 172, 151, 103, 33, 234, 41, 26, 207, 248, 107, 114, 112, 170, 95,
					240, 36, 169, 143, 183, 49, 65, 46, 50, 115, 232, 160, 43, 101, 50, 149, 71, 224, 248, 19, 136, 204, 212, 83, 247, 49, 137, 243, 216, 220,
					155, 220, 243, 157, 70, 105, 121, 33, 34, 19, 59, 184, 91, 56, 140, 157, 34, 192, 222, 219, 105, 22, 209, 184, 8, 132, 135, 195, 210, 44,
					204, 220, 106, 89, 234, 2, 119, 112, 88, 134, 40, 178, 61, 141, 212, 181, 137, 232, 179, 57, 194, 203, 143, 234, 254, 253, 251, 179, 72, 7,
					159, 98, 103, 38, 221, 116, 161, 212, 50, 87, 33, 193, 118, 12, 120, 22, 161, 43, 205, 76, 139, 233, 158, 25, 242, 12, 61, 145, 69, 211, 117, 178, 20, 249, 236, 145, 48, 143, 243, 46, 20, 13, 164, 22, 70, 170, 201, 203, 122, 108, 204, 64, 31, 123, 222, 185, 48, 113, 222, 117,
					67, 153, 122, 93, 105, 238, 217, 223, 146, 246, 202, 197, 211, 41, 27, 251, 169, 12, 121, 210, 206, 237, 46, 201, 152, 189, 128, 179, 118, 235,
					193, 231, 207, 90, 239, 133, 225, 25, 69, 228, 165, 92, 27, 82, 94, 152, 70, 94, 98, 209, 84, 129, 230, 252, 27, 0, 0, 255, 255, 83, 100, 162, 255, 39, 11, 0, 0,
				},
			},
		},
	}
}

func (h *HTTPHandler) GetFile(fileName string) *File {
	File, exists := h.files[fileName]
	if !exists || strings.LastIndex(fileName, ".") < 1 {
		return nil
	}

	return &File
}

func (h *HTTPHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	fileName := r.URL.Path
	if fileName == "/" {
		fileName = "/index.html"
	}

	file := h.GetFile(fileName)
	if file == nil {
		http.Error(w, http.StatusText(http.StatusNotFound), http.StatusNotFound)
		return
	}

	if r.Header.Get("If-None-Match") == file.ETag {
		http.Error(w, http.StatusText(http.StatusNotModified), http.StatusNotModified)
		return
	}

	w.Header().Set("Content-Type", file.ContentType)
	w.Header().Set("Content-Encoding", "gzip")
	w.Header().Set("ETag", file.ETag)

	_, _ = w.Write(file.Data)
}
