// It's autogenerated file. Do not modify it.
// Generated by https://github.com/sergei-svistunov/gostatic2lib

package docs

import (
	"net/http"
	"strings"
)

type HTTPHandler struct {
	files map[string]File
}

type File struct {
	ContentType string
	ETag        string
	Data        []byte
}

func NewHTTPHandler() *HTTPHandler {
	return &HTTPHandler{
		files: map[string]File{
			"/game.md": {
				ContentType: ``,
				ETag:        "3c9835f162b63cf6",
				Data: []byte{31, 139, 8, 0, 0, 0, 0, 0, 2, 255, 172, 86, 205, 110, 211, 64, 16, 190, 239, 83, 124, 82, 132, 148, 68, 197, 142, 157, 164, 63, 220, 80, 41, 237, 1, 36, 84, 184, 160, 170,
					106, 55, 246, 164, 94, 100, 123, 163, 221, 117, 67, 64, 72, 8, 137, 138, 43, 40, 226, 194, 129, 19, 239, 192, 243, 228, 9, 120, 4, 100,
					59, 127, 118, 156, 186, 160, 70, 142, 162, 25, 207, 124, 223, 204, 231, 201, 142, 27, 13, 188, 10, 8, 42, 9, 73, 51, 246, 90, 38, 8,
					248, 53, 129, 35, 226, 239, 8, 99, 97, 2, 184, 240, 149, 140, 73, 239, 64, 198, 4, 57, 132, 9, 40, 130, 208, 152, 200, 68, 105, 139,
					165, 249, 121, 4, 180, 225, 202, 64, 196, 105, 200, 220, 24, 73, 17, 155, 29, 12, 165, 2, 189, 229, 209, 40, 36, 188, 119, 118, 156, 15,
					104, 254, 249, 249, 227, 119, 43, 79, 31, 139, 56, 38, 149, 98, 114, 140, 66, 62, 33, 133, 113, 32, 17, 18, 247, 53, 2, 161, 237, 128,
					84, 206, 129, 161, 80, 218, 192, 200, 140, 226, 74, 242, 176, 132, 237, 186, 115, 240, 95, 159, 91, 22, 99, 151, 151, 151, 12, 174, 59, 187,
					249, 138, 217, 247, 47, 247, 114, 49, 184, 206, 108, 250, 105, 142, 135, 244, 179, 248, 93, 51, 150, 177, 157, 181, 216, 37, 6, 10, 214, 134, 27, 69, 62, 231, 160, 192, 183, 198, 186, 114, 20, 89, 157, 253, 85, 70, 153, 187, 96, 87, 171, 178, 194, 217, 187, 141, 121, 213, 246, 50,
					126, 183, 204, 187, 149, 6, 219, 101, 96, 112, 250, 245, 29, 23, 120, 123, 69, 149, 107, 149, 174, 238, 182, 91, 66, 193, 74, 220, 146, 185,
					202, 113, 171, 158, 111, 133, 141, 138, 111, 142, 80, 61, 77, 21, 89, 107, 253, 118, 234, 116, 174, 228, 46, 245, 139, 170, 185, 42, 244, 91,
					214, 25, 251, 119, 208, 249, 86, 25, 24, 176, 87, 167, 114, 185, 16, 6, 236, 110, 87, 249, 31, 250, 237, 87, 48, 223, 50, 85, 232, 213,
					253, 139, 234, 111, 44, 177, 186, 27, 90, 111, 60, 103, 148, 187, 118, 55, 213, 70, 189, 214, 171, 252, 197, 100, 165, 71, 237, 150, 121, 6,
					144, 158, 149, 121, 252, 150, 169, 250, 223, 115, 18, 152, 77, 167, 179, 233, 199, 251, 185, 110, 190, 177, 172, 220, 142, 227, 118, 123, 253, 221,
					189, 253, 3, 203, 178, 178, 3, 158, 53, 26, 56, 145, 227, 116, 43, 228, 75, 135, 227, 138, 71, 196, 152, 99, 225, 144, 135, 97, 182, 43,
					34, 50, 129, 244, 209, 110, 159, 189, 145, 34, 62, 111, 54, 236, 211, 23, 135, 15, 220, 78, 238, 215, 118, 234, 189, 184, 118, 90, 237, 182, 197, 220, 202, 188, 49, 23, 230, 194, 36, 170, 34, 121, 121, 43, 71, 72, 43, 81, 228, 145, 184, 166, 12, 195, 75, 148, 162, 216, 100, 85,
					165, 37, 26, 178, 88, 119, 141, 131, 123, 70, 200, 120, 65, 213, 156, 44, 214, 112, 31, 154, 60, 25, 251, 186, 101, 177, 158, 133, 99, 153,
					183, 72, 35, 184, 22, 99, 79, 165, 66, 36, 21, 65, 196, 67, 169, 34, 158, 97, 104, 90, 148, 172, 225, 147, 246, 148, 24, 101, 254, 1,
					133, 114, 108, 101, 82, 165, 27, 87, 203, 68, 121, 4, 79, 250, 4, 30, 251, 24, 72, 179, 216, 161, 243, 247, 0, 143, 199, 24, 138, 216,
					159, 175, 251, 124, 167, 159, 29, 11, 115, 146, 12, 160, 104, 36, 181, 48, 82, 77, 206, 155, 129, 49, 35, 253, 200, 182, 175, 132, 9, 146,
					129, 229, 201, 200, 30, 72, 243, 48, 237, 85, 219, 249, 139, 65, 43, 39, 126, 38, 61, 30, 158, 38, 233, 174, 103, 236, 37, 17, 206, 78,
					143, 30, 63, 121, 126, 116, 39, 12, 219, 40, 34, 59, 226, 218, 144, 178, 189, 200, 183, 195, 20, 77, 101, 104, 173, 191, 1, 0, 0, 255, 255, 70, 91, 16, 252, 199, 8, 0, 0,
				},
			},
		},
	}
}

func (h *HTTPHandler) GetFile(fileName string) *File {
	File, exists := h.files[fileName]
	if !exists || strings.LastIndex(fileName, ".") < 1 {
		return nil
	}

	return &File
}

func (h *HTTPHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	fileName := r.URL.Path
	if fileName == "/" {
		fileName = "/index.html"
	}

	file := h.GetFile(fileName)
	if file == nil {
		http.Error(w, http.StatusText(http.StatusNotFound), http.StatusNotFound)
		return
	}

	if r.Header.Get("If-None-Match") == file.ETag {
		http.Error(w, http.StatusText(http.StatusNotModified), http.StatusNotModified)
		return
	}

	w.Header().Set("Content-Type", file.ContentType)
	w.Header().Set("Content-Encoding", "gzip")
	w.Header().Set("ETag", file.ETag)

	_, _ = w.Write(file.Data)
}
