// It's autogenerated file. Do not modify it.
// Generated by https://github.com/sergei-svistunov/gostatic2lib

package docs

import (
	"net/http"
	"strings"
)

type HTTPHandler struct {
	files map[string]File
}

type File struct {
	ContentType string
	ETag        string
	Data        []byte
}

func NewHTTPHandler() *HTTPHandler {
	return &HTTPHandler{
		files: map[string]File{
			"/game.md": {
				ContentType: `text/markdown; charset=utf-8`,
				ETag:        "e39e7d668a97ce4d",
				Data: []byte{31, 139, 8, 0, 0, 0, 0, 0, 2, 255, 172, 86, 219, 110, 219, 70, 16, 125, 223, 175, 56, 144, 145, 86, 98, 20, 210, 148, 124, 71, 90, 32, 77, 237, 196, 72, 2, 183, 110, 155,
					180, 48, 130, 104, 69, 142, 196, 85, 72, 174, 180, 187, 180, 164, 4, 1, 138, 62, 4, 125, 109, 97, 244, 165, 15, 253, 141, 126, 143, 191,
					160, 159, 80, 44, 87, 119, 201, 113, 90, 68, 144, 32, 236, 112, 230, 156, 157, 51, 179, 220, 217, 218, 194, 247, 9, 65, 21, 41, 105, 198,
					126, 146, 5, 18, 126, 73, 224, 200, 248, 27, 194, 80, 152, 4, 154, 12, 100, 7, 81, 66, 209, 235, 190, 20, 185, 209, 213, 179, 26, 140,
					196, 165, 208, 194, 212, 209, 64, 172, 100, 78, 186, 14, 153, 147, 245, 52, 9, 101, 16, 26, 99, 89, 40, 237, 3, 140, 89, 10, 231, 4,
					109, 184, 50, 16, 185, 245, 154, 44, 74, 208, 58, 58, 82, 129, 70, 60, 235, 167, 132, 183, 97, 61, 124, 135, 234, 63, 127, 253, 249, 119,
					109, 134, 48, 20, 121, 78, 202, 34, 115, 244, 83, 62, 38, 133, 97, 34, 145, 18, 143, 53, 18, 161, 131, 132, 148, 163, 129, 73, 148, 44,
					186, 9, 120, 154, 150, 68, 11, 155, 183, 220, 82, 197, 164, 124, 198, 90, 173, 22, 67, 163, 113, 253, 254, 55, 92, 255, 241, 235, 39, 249, 50, 52, 194, 235, 171, 95, 38, 120, 176, 159, 233, 255, 217, 124, 49, 243, 221, 94, 240, 157, 97, 96, 105, 181, 102, 198, 50, 95, 120, 184,
					196, 183, 192, 58, 55, 44, 179, 134, 7, 243, 136, 85, 238, 165, 245, 102, 85, 230, 56, 251, 31, 98, 158, 46, 23, 120, 247, 86, 121, 111,
					164, 193, 205, 50, 48, 132, 187, 183, 103, 188, 196, 187, 179, 172, 242, 173, 74, 111, 206, 182, 185, 130, 114, 54, 23, 119, 177, 212, 75, 49,
					141, 77, 245, 221, 176, 198, 134, 159, 67, 216, 220, 77, 27, 162, 22, 242, 221, 190, 77, 231, 141, 220, 43, 249, 98, 83, 95, 45, 229, 187,
					170, 51, 14, 62, 66, 231, 15, 202, 192, 128, 253, 21, 12, 123, 112, 54, 176, 46, 237, 116, 239, 102, 149, 255, 67, 190, 187, 235, 204, 31,
					234, 42, 236, 220, 118, 138, 110, 127, 48, 195, 106, 174, 105, 189, 86, 103, 172, 102, 221, 88, 87, 27, 183, 107, 61, 143, 159, 118, 150, 125,
					203, 174, 19, 96, 250, 57, 115, 222, 55, 244, 212, 255, 125, 75, 2, 215, 87, 87, 215, 87, 63, 127, 154, 239, 251, 223, 89, 185, 215, 237,
					176, 209, 220, 217, 221, 219, 63, 56, 244, 125, 191, 124, 189, 179, 173, 45, 60, 150, 67, 123, 95, 185, 219, 134, 163, 203, 51, 98, 44, 244, 241, 112, 122, 61, 100, 100, 18, 25, 195, 243, 46, 122, 82, 228, 47, 171, 91, 193, 249, 55, 15, 239, 52, 182, 157, 93, 7, 214, 250, 234,
					50, 172, 121, 158, 207, 26, 62, 170, 178, 111, 132, 204, 121, 90, 131, 232, 216, 107, 14, 93, 105, 64, 74, 73, 133, 214, 131, 84, 17, 143,
					199, 167, 249, 35, 158, 81, 203, 194, 231, 165, 139, 78, 100, 145, 198, 136, 214, 57, 21, 109, 102, 117, 118, 199, 235, 174, 98, 187, 243, 211,
					24, 29, 37, 51, 120, 94, 204, 13, 247, 60, 188, 166, 177, 207, 154, 27, 179, 25, 114, 97, 94, 153, 66, 109, 0, 159, 61, 154, 224, 27,
					9, 69, 17, 137, 75, 114, 23, 102, 161, 20, 229, 166, 100, 180, 194, 25, 242, 217, 206, 2, 7, 143, 172, 2, 11, 84, 188, 223, 79, 199,
					29, 169, 34, 90, 231, 114, 206, 175, 230, 46, 142, 147, 237, 250, 120, 36, 93, 101, 168, 143, 38, 99, 39, 82, 33, 147, 138, 32, 242, 142,
					84, 25, 47, 57, 52, 77, 83, 210, 136, 73, 71, 74, 148, 234, 163, 77, 169, 28, 250, 139, 5, 238, 115, 165, 201, 77, 46, 165, 68, 173,
					179, 210, 83, 183, 220, 252, 80, 62, 40, 167, 135, 54, 215, 180, 183, 3, 202, 35, 25, 83, 140, 246, 216, 144, 6, 87, 138, 143, 167, 147, 73, 71, 80, 26, 163, 229, 10, 173, 125, 27, 234, 15, 121, 154, 234, 214, 210, 160, 114, 84, 206, 16, 61, 45, 115, 246, 150, 1, 149, 137,
					127, 229, 8, 111, 203, 134, 172, 216, 192, 217, 10, 168, 148, 24, 149, 35, 84, 130, 32, 8, 78, 135, 79, 79, 6, 77, 245, 124, 16, 246,
					206, 7, 97, 208, 17, 163, 222, 183, 119, 15, 213, 143, 34, 84, 199, 69, 168, 14, 31, 132, 234, 100, 63, 12, 98, 57, 234, 157, 20, 129,
					122, 46, 70, 234, 135, 65, 168, 154, 131, 80, 29, 15, 14, 47, 227, 39, 163, 222, 87, 131, 102, 16, 60, 25, 245, 206, 247, 14, 47, 159,
					159, 158, 139, 99, 139, 91, 169, 79, 232, 236, 33, 176, 255, 239, 152, 253, 189, 115, 7, 226, 152, 71, 9, 60, 175, 45, 140, 231, 77, 211,
					117, 185, 199, 212, 17, 118, 70, 19, 29, 112, 68, 148, 166, 72, 184, 149, 203, 110, 26, 82, 33, 150, 164, 243, 207, 141, 143, 239, 136, 208,
					149, 179, 105, 173, 172, 68, 29, 137, 171, 66, 57, 107, 185, 38, 162, 52, 117, 10, 117, 37, 235, 20, 121, 132, 106, 6, 239, 25, 127, 67,
					53, 156, 234, 23, 60, 77, 171, 163, 58, 198, 40, 68, 110, 14, 106, 104, 75, 153, 78, 148, 18, 56, 250, 2, 34, 55, 213, 204, 127, 76, 162, 155, 152, 123, 227, 123, 97, 205, 115, 150, 23, 34, 54, 73, 13, 119, 75, 135, 81, 173, 12, 176, 37, 60, 205, 99, 26, 149, 129, 8,
					112, 224, 204, 194, 204, 172, 150, 165, 42, 112, 7, 7, 46, 68, 145, 109, 127, 100, 190, 221, 136, 190, 152, 33, 188, 252, 172, 26, 222, 191,
					63, 141, 172, 225, 75, 108, 79, 165, 155, 76, 203, 90, 22, 42, 34, 216, 230, 1, 207, 99, 180, 237, 233, 119, 90, 76, 134, 232, 136, 231,
					232, 136, 60, 158, 204, 194, 78, 228, 139, 71, 194, 60, 46, 218, 80, 212, 151, 90, 24, 169, 198, 47, 171, 137, 49, 125, 125, 20, 4, 93,
					97, 146, 162, 237, 71, 50, 11, 218, 210, 220, 179, 199, 78, 7, 110, 100, 174, 185, 30, 127, 42, 35, 158, 158, 23, 118, 4, 102, 204, 22,
					224, 226, 252, 248, 193, 215, 207, 142, 63, 10, 35, 48, 138, 40, 200, 184, 54, 164, 130, 40, 139, 131, 212, 162, 169, 18, 173, 246, 111, 0, 0, 0, 255, 255, 10, 26, 244, 98, 4, 12, 0, 0,
				},
			},
		},
	}
}

func (h *HTTPHandler) GetFile(fileName string) *File {
	File, exists := h.files[fileName]
	if !exists || strings.LastIndex(fileName, ".") < 1 {
		return nil
	}

	return &File
}

func (h *HTTPHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	fileName := r.URL.Path
	if fileName == "/" {
		fileName = "/index.html"
	}

	file := h.GetFile(fileName)
	if file == nil {
		http.Error(w, http.StatusText(http.StatusNotFound), http.StatusNotFound)
		return
	}

	if r.Header.Get("If-None-Match") == file.ETag {
		http.Error(w, http.StatusText(http.StatusNotModified), http.StatusNotModified)
		return
	}

	w.Header().Set("Content-Type", file.ContentType)
	w.Header().Set("Content-Encoding", "gzip")
	w.Header().Set("ETag", file.ETag)

	_, _ = w.Write(file.Data)
}
